apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: wait-for-rollout
  description: 
  - |-
    Given a namespace, a deployment config name, and replication controller name, find the rc associated with the dc (using the .status.latestVersion field on the dc)
    and then check the rc every five seconds until .spec.replicas=.spec.readyReplicas .
spec:
  params:
  - default: default
    description: The namespace within which to do the checks
    name: namespace
    type: string
  - description: The deployment config to retrieve status.latestVersion from
    name: dc-name
    type: string
  - description: The replication controller name for which to compare status.replicas and status.readyReplicas
    name: rc-name
    type: string
  steps:
  - args:
    - |-
      latestVersion=$(oc get dc $(params.dc-name) -n $(params.namespace) -o jsonpath='{.status.latestVersion}' | tr -d "\n")
      echo Watching rc $(params.rc-name)-$latestVersion until  .spec.replicas=.spec.readyReplicas
      replicas=$(oc get rc $(params.rc-name)-$latestVersion -n $(params.namespace) -o jsonpath='{.status.replicas}' | tr -d "\n")
      if [ -z "$replicas" ]; then replicas=0; fi
      echo replicas=$replicas
      readyReplicas=$(oc get rc $(params.rc-name)-$latestVersion -n $(params.namespace) -o jsonpath='{.status.readyReplicas}' | tr -d "\n")
      if [ -z "$readyReplicas" ]; then readyReplicas=0; fi
      echo readyReplicas=$readyReplicas
      while [ "$replicas" -ne "$readyReplicas" ]
      do
      sleep 5
      replicas=$(oc get rc $(params.rc-name)-$latestVersion -n $(params.namespace) -o jsonpath='{.status.replicas}' | tr -d "\n")
      if [ -z "$replicas" ]; then replicas=0; fi
      echo replicas=$replicas
      readyReplicas=$(oc get rc $(params.rc-name)-$latestVersion -n $(params.namespace) -o jsonpath='{.status.readyReplicas}' | tr -d "\n")
      if [ -z "$readyReplicas" ]; then readyReplicas=0; fi
      echo readyReplicas=$readyReplicas
      done
      echo rc $(params.rc-name)-$latestVersion .spec.readyReplicas now matches .spec.replicas
      echo -----------------------------------
    command:
    - /bin/bash
    - -c
    image: quay.io/openshift/origin-cli:latest
    name: apply
    resources: {}
