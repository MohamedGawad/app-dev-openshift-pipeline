#!groovy
def GUID="654f"
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "image-registry.openshift-image-registry.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    print("Shell environment variable GUID is ${env.GUID}")
    def mvnCmd = "mvn -s ./nexus_settings.xml"

    // Define global variables
    def imageName = "${GUID}-tasks"
    def devProject = "${GUID}-tasks-dev"
    def prodProject = "${GUID}-tasks-prod"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm

      // Patch Source artifactId to include GUID
      sh "sed -i 's/GUID/${GUID}/g' openshift-tasks/pom.xml"
    }

    // Build the Tasks Application in the directory 'openshift-tasks'
    dir('openshift-tasks') {
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // TBD Set the tag for the development image: version + build number
      def devTag  = "${version}.${currentBuild.number}"
      // Set the tag for the production image: version
      def prodTag = version

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"

        // TBD: Execute Maven Build
        sh("${mvnCmd} clean package -DskipTests=true")
      }

      // Using Maven run the unit tests
      stage('Unit Tests') {
        echo "Running Unit Tests"

        // TBD: Execute Unit Tests
        sh("${mvnCmd} test")

      }

      // Using Maven to call SonarQube for Code Analysis
      stage('Code Analysis') {
        echo "Running Code Analysis"

        // TBD: Execute Sonarqube Tests
        //      Your project name should be "${GUID}-${JOB_BASE_NAME}-${devTag}"
        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://homework-sonarqube.apps.shared.na.openshift.opentlc.com/ -Dsonar.projectName=${GUID}-${JOB_BASE_NAME}-${devTag} -Dsonar.projectVersion=${devTag}"
      }

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        // TBD: Publish to Nexus
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://homework-nexus.gpte-hw-cicd.svc.cluster.local:8081/repository/releases"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image ${imageName}:${devTag}"

        // TBD: Build Image, tag Image
        //      Make sure the image name is correct!
        sh "oc apply -f yaml/tasksbinarybuild.bc.yaml"
        sh "oc start-build taskbuild -n ${devProject} --from-file=http://homework-nexus.gpte-hw-cicd.svc.cluster.local:8081/repository/releases/org/jboss/quickstarts/eap/${imageName}/${version}/${imageName}-${version}.war --wait=true"
        sh "oc tag -n ${devProject} ${imageName}:latest ${imageName}:${devTag}"

      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        // TBD: Deploy to development Project
        script {
          // Update the Image on the Development Deployment Config
          openshift.withCluster() {
            openshift.withProject("${devProject}") {
              //      Set Image, Set VERSION
              openshift.set("image", "dc/tasks", "tasks=image-registry.openshift-image-registry.svc:5000/${devProject}/tasks:${devTag}")
              //      (Re-) Create ConfigMap
              openshift.selector('configmap', 'tasks-config').delete()
              def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties' )
              //      Make sure the application is running and ready before proceeding
              openshift.selector("dc", "tasks").rollout().latest();
              def dc = openshift.selector("dc", "tasks").object()
              def dc_version = dc.status.latestVersion
              def rc = openshift.selector("rc", "tasks-${dc_version}").object()

              echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
              while (rc.spec.replicas != rc.status.readyReplicas) {
                sleep 5
                rc = openshift.selector("rc", "tasks-${dc_version}").object()
              }
            }
          }
        }




      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        // TBD: Copy image to Nexus container registry
        sh("skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:redhat docker://image-registry.openshift-image-registry.svc:5000/${devProject}/tasks:${devTag} docker://homework-nexus.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}")

        // TBD: Tag the built image with the production tag.
        sh("oc tag -n ${prodProject} ${devProject}/${imageName}:${devTag} ${prodProject}/${imageName}:${prodTag}")
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        // TBD: Determine which application is active
        //      Set Image, Set VERSION
        //      (Re-)create ConfigMap
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding
        script {
          openshift.withCluster() {
            openshift.withProject("${prodProject}") {
              activeApp = openshift.selector("route", "tasks").object().spec.to.name
              if (activeApp == "tasks-green") {
                destApp = "tasks-blue"
              }
              else
              {
                destApp = "tasks-green"
              }
              echo "Active Application:      " + activeApp
              echo "Destination Application: " + destApp

              // Update the Image on the Production Deployment Config
              def dc = openshift.selector("dc/${destApp}").object()
              dc.spec.template.spec.containers[0].image="image-registry.openshift-image-registry.svc:5000/${devProject}/tasks:${prodTag}"
            }
          }
        }

      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        // TBD: Execute switch
        //      Hint: sleep 5 seconds after the switch for the route to be fully
        //            switched over

      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}